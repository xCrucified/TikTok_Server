// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using data_access.data;

#nullable disable

namespace data_access.Migrations
{
    [DbContext(typeof(TikTokDbContext))]
    [Migration("20240807094227_newDb")]
    partial class newDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("business_logic.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId");

                    b.ToTable("Comment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Video Super!!!",
                            UserId = "1",
                            VideoId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Nice video!",
                            UserId = "2",
                            VideoId = 2
                        },
                        new
                        {
                            Id = 3,
                            Content = "Very informative.",
                            UserId = "3",
                            VideoId = 3
                        },
                        new
                        {
                            Id = 4,
                            Content = "Amazing content!",
                            UserId = "4",
                            VideoId = 4
                        },
                        new
                        {
                            Id = 5,
                            Content = "Loved it!",
                            UserId = "5",
                            VideoId = 5
                        },
                        new
                        {
                            Id = 6,
                            Content = "Great work!",
                            UserId = "6",
                            VideoId = 6
                        },
                        new
                        {
                            Id = 7,
                            Content = "Fantastic!",
                            UserId = "7",
                            VideoId = 7
                        },
                        new
                        {
                            Id = 8,
                            Content = "Very helpful.",
                            UserId = "8",
                            VideoId = 8
                        },
                        new
                        {
                            Id = 9,
                            Content = "Enjoyed watching.",
                            UserId = "9",
                            VideoId = 9
                        },
                        new
                        {
                            Id = 10,
                            Content = "Well done!",
                            UserId = "10",
                            VideoId = 10
                        });
                });

            modelBuilder.Entity("business_logic.Entities.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTimeLike")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId");

                    b.ToTable("Likes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTimeLike = new DateTime(2024, 8, 7, 12, 42, 26, 890, DateTimeKind.Local).AddTicks(2615),
                            UserId = "1",
                            VideoId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateTimeLike = new DateTime(2024, 8, 7, 12, 42, 26, 890, DateTimeKind.Local).AddTicks(2617),
                            UserId = "2",
                            VideoId = 2
                        },
                        new
                        {
                            Id = 3,
                            DateTimeLike = new DateTime(2024, 8, 7, 12, 42, 26, 890, DateTimeKind.Local).AddTicks(2618),
                            UserId = "3",
                            VideoId = 3
                        },
                        new
                        {
                            Id = 4,
                            DateTimeLike = new DateTime(2024, 8, 7, 12, 42, 26, 890, DateTimeKind.Local).AddTicks(2620),
                            UserId = "4",
                            VideoId = 4
                        },
                        new
                        {
                            Id = 5,
                            DateTimeLike = new DateTime(2024, 8, 7, 12, 42, 26, 890, DateTimeKind.Local).AddTicks(2622),
                            UserId = "5",
                            VideoId = 5
                        },
                        new
                        {
                            Id = 6,
                            DateTimeLike = new DateTime(2024, 8, 7, 12, 42, 26, 890, DateTimeKind.Local).AddTicks(2623),
                            UserId = "6",
                            VideoId = 6
                        },
                        new
                        {
                            Id = 7,
                            DateTimeLike = new DateTime(2024, 8, 7, 12, 42, 26, 890, DateTimeKind.Local).AddTicks(2625),
                            UserId = "7",
                            VideoId = 7
                        },
                        new
                        {
                            Id = 8,
                            DateTimeLike = new DateTime(2024, 8, 7, 12, 42, 26, 890, DateTimeKind.Local).AddTicks(2626),
                            UserId = "8",
                            VideoId = 8
                        },
                        new
                        {
                            Id = 9,
                            DateTimeLike = new DateTime(2024, 8, 7, 12, 42, 26, 890, DateTimeKind.Local).AddTicks(2628),
                            UserId = "9",
                            VideoId = 9
                        },
                        new
                        {
                            Id = 10,
                            DateTimeLike = new DateTime(2024, 8, 7, 12, 42, 26, 890, DateTimeKind.Local).AddTicks(2629),
                            UserId = "10",
                            VideoId = 10
                        });
                });

            modelBuilder.Entity("business_logic.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("business_logic.Entities.Save", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateSave")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId");

                    b.ToTable("Saves", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateSave = new DateTime(2024, 8, 7, 12, 42, 26, 890, DateTimeKind.Local).AddTicks(2587),
                            UserId = "1",
                            VideoId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateSave = new DateTime(2024, 8, 7, 12, 42, 26, 890, DateTimeKind.Local).AddTicks(2589),
                            UserId = "2",
                            VideoId = 2
                        },
                        new
                        {
                            Id = 3,
                            DateSave = new DateTime(2024, 8, 7, 12, 42, 26, 890, DateTimeKind.Local).AddTicks(2591),
                            UserId = "3",
                            VideoId = 3
                        },
                        new
                        {
                            Id = 4,
                            DateSave = new DateTime(2024, 8, 7, 12, 42, 26, 890, DateTimeKind.Local).AddTicks(2594),
                            UserId = "4",
                            VideoId = 4
                        },
                        new
                        {
                            Id = 5,
                            DateSave = new DateTime(2024, 8, 7, 12, 42, 26, 890, DateTimeKind.Local).AddTicks(2595),
                            UserId = "5",
                            VideoId = 5
                        },
                        new
                        {
                            Id = 6,
                            DateSave = new DateTime(2024, 8, 7, 12, 42, 26, 890, DateTimeKind.Local).AddTicks(2597),
                            UserId = "6",
                            VideoId = 6
                        },
                        new
                        {
                            Id = 7,
                            DateSave = new DateTime(2024, 8, 7, 12, 42, 26, 890, DateTimeKind.Local).AddTicks(2598),
                            UserId = "7",
                            VideoId = 7
                        },
                        new
                        {
                            Id = 8,
                            DateSave = new DateTime(2024, 8, 7, 12, 42, 26, 890, DateTimeKind.Local).AddTicks(2600),
                            UserId = "8",
                            VideoId = 8
                        },
                        new
                        {
                            Id = 9,
                            DateSave = new DateTime(2024, 8, 7, 12, 42, 26, 890, DateTimeKind.Local).AddTicks(2601),
                            UserId = "9",
                            VideoId = 9
                        },
                        new
                        {
                            Id = 10,
                            DateSave = new DateTime(2024, 8, 7, 12, 42, 26, 890, DateTimeKind.Local).AddTicks(2603),
                            UserId = "10",
                            VideoId = 10
                        });
                });

            modelBuilder.Entity("business_logic.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("Followers")
                        .HasColumnType("int");

                    b.Property<int?>("Followings")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Balance = 99999m,
                            ConcurrencyStamp = "f40258ed-7350-40d7-87db-f4b0d91a1df9",
                            Description = "admin",
                            EmailConfirmed = false,
                            Followers = -1,
                            Followings = 0,
                            LockoutEnabled = false,
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c94fface-456d-41cd-a38c-976b997135f1",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Balance = 1000m,
                            ConcurrencyStamp = "d8d18210-3502-4361-9f83-6b46f8dbbd21",
                            Description = "user1",
                            EmailConfirmed = false,
                            Followers = 10,
                            Followings = 5,
                            LockoutEnabled = false,
                            PhoneNumber = "234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "443d4fca-2b0b-4a6e-a41a-264722762f24",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            Balance = 2000m,
                            ConcurrencyStamp = "86d4b016-934e-40dc-ad56-53e1f41de623",
                            Description = "user2",
                            EmailConfirmed = false,
                            Followers = 20,
                            Followings = 10,
                            LockoutEnabled = false,
                            PhoneNumber = "345678901",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b7b5e19b-675d-4796-932b-0c874a072d04",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            Balance = 3000m,
                            ConcurrencyStamp = "1bfa0adf-9cd3-41bf-89bc-9ee95f1193a8",
                            Description = "user3",
                            EmailConfirmed = false,
                            Followers = 30,
                            Followings = 15,
                            LockoutEnabled = false,
                            PhoneNumber = "456789012",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "907031cb-0bb3-44d4-951e-54f457d962df",
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            Balance = 4000m,
                            ConcurrencyStamp = "03c714f1-189e-46e5-af6b-75fe33cf4bab",
                            Description = "user4",
                            EmailConfirmed = false,
                            Followers = 40,
                            Followings = 20,
                            LockoutEnabled = false,
                            PhoneNumber = "567890123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ae8c5bd1-a1c8-4147-912c-92d6a5aa7fcb",
                            TwoFactorEnabled = false,
                            UserName = "user4"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            Balance = 5000m,
                            ConcurrencyStamp = "5a902c62-8da5-4749-9d3b-c4660433e2b6",
                            Description = "user5",
                            EmailConfirmed = false,
                            Followers = 50,
                            Followings = 25,
                            LockoutEnabled = false,
                            PhoneNumber = "678901234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "091c2c3b-e679-481a-8f3f-68a9f7f7d177",
                            TwoFactorEnabled = false,
                            UserName = "user5"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            Balance = 6000m,
                            ConcurrencyStamp = "8aa8dbfb-d83d-420d-ac59-7767f7ef1408",
                            Description = "user6",
                            EmailConfirmed = false,
                            Followers = 60,
                            Followings = 30,
                            LockoutEnabled = false,
                            PhoneNumber = "789012345",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d2b5cf1b-d883-4817-8c8e-a4aa316026ed",
                            TwoFactorEnabled = false,
                            UserName = "user6"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            Balance = 7000m,
                            ConcurrencyStamp = "885d0771-50a9-4293-a338-01fa7d147ac5",
                            Description = "user7",
                            EmailConfirmed = false,
                            Followers = 70,
                            Followings = 35,
                            LockoutEnabled = false,
                            PhoneNumber = "890123456",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eff980fd-63bc-4b4f-8d5f-b75140124064",
                            TwoFactorEnabled = false,
                            UserName = "user7"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            Balance = 8000m,
                            ConcurrencyStamp = "a40d41ec-d4a2-479f-a8ac-8d9f32014de9",
                            Description = "user8",
                            EmailConfirmed = false,
                            Followers = 80,
                            Followings = 40,
                            LockoutEnabled = false,
                            PhoneNumber = "901234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cc6b17f0-f21c-4195-8fc6-9e923471d4bf",
                            TwoFactorEnabled = false,
                            UserName = "user8"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            Balance = 9000m,
                            ConcurrencyStamp = "912104c3-65bc-4e94-ade4-ee30a9a31d3c",
                            Description = "user9",
                            EmailConfirmed = false,
                            Followers = 90,
                            Followings = 45,
                            LockoutEnabled = false,
                            PhoneNumber = "012345678",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a1872b34-3efd-4695-b172-6b4b21ad9cd1",
                            TwoFactorEnabled = false,
                            UserName = "user9"
                        });
                });

            modelBuilder.Entity("business_logic.Entities.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.Property<bool>("isPrivate")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Videos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PublishDate = new DateTime(2024, 8, 7, 12, 42, 26, 890, DateTimeKind.Local).AddTicks(2494),
                            Title = "test1",
                            UserId = "1",
                            VideoUrl = "https://www.youtube.com/watch?v=bFhY0LH9XxY",
                            Views = 0,
                            isPrivate = true
                        },
                        new
                        {
                            Id = 2,
                            PublishDate = new DateTime(2024, 8, 7, 12, 42, 26, 890, DateTimeKind.Local).AddTicks(2533),
                            Title = "test2",
                            UserId = "2",
                            VideoUrl = "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
                            Views = 0,
                            isPrivate = false
                        },
                        new
                        {
                            Id = 3,
                            PublishDate = new DateTime(2024, 8, 7, 12, 42, 26, 890, DateTimeKind.Local).AddTicks(2536),
                            Title = "test3",
                            UserId = "3",
                            VideoUrl = "https://www.youtube.com/watch?v=3JZ_D3ELwOQ",
                            Views = 0,
                            isPrivate = true
                        },
                        new
                        {
                            Id = 4,
                            PublishDate = new DateTime(2024, 8, 7, 12, 42, 26, 890, DateTimeKind.Local).AddTicks(2538),
                            Title = "test4",
                            UserId = "4",
                            VideoUrl = "https://www.youtube.com/watch?v=oHg5SJYRHA0",
                            Views = 0,
                            isPrivate = false
                        },
                        new
                        {
                            Id = 5,
                            PublishDate = new DateTime(2024, 8, 7, 12, 42, 26, 890, DateTimeKind.Local).AddTicks(2540),
                            Title = "test5",
                            UserId = "5",
                            VideoUrl = "https://www.youtube.com/watch?v=ZZ5LpwO-An4",
                            Views = 0,
                            isPrivate = true
                        },
                        new
                        {
                            Id = 6,
                            PublishDate = new DateTime(2024, 8, 7, 12, 42, 26, 890, DateTimeKind.Local).AddTicks(2542),
                            Title = "test6",
                            UserId = "6",
                            VideoUrl = "https://www.youtube.com/watch?v=6_b7RDuLwcI",
                            Views = 0,
                            isPrivate = false
                        },
                        new
                        {
                            Id = 7,
                            PublishDate = new DateTime(2024, 8, 7, 12, 42, 26, 890, DateTimeKind.Local).AddTicks(2543),
                            Title = "test7",
                            UserId = "7",
                            VideoUrl = "https://www.youtube.com/watch?v=tVj0ZTS4WF4",
                            Views = 0,
                            isPrivate = true
                        },
                        new
                        {
                            Id = 8,
                            PublishDate = new DateTime(2024, 8, 7, 12, 42, 26, 890, DateTimeKind.Local).AddTicks(2545),
                            Title = "test8",
                            UserId = "8",
                            VideoUrl = "https://www.youtube.com/watch?v=FTQbiNvZqaY",
                            Views = 0,
                            isPrivate = false
                        },
                        new
                        {
                            Id = 9,
                            PublishDate = new DateTime(2024, 8, 7, 12, 42, 26, 890, DateTimeKind.Local).AddTicks(2547),
                            Title = "test9",
                            UserId = "9",
                            VideoUrl = "https://www.youtube.com/watch?v=lXMskKTw3Bc",
                            Views = 0,
                            isPrivate = true
                        },
                        new
                        {
                            Id = 10,
                            PublishDate = new DateTime(2024, 8, 7, 12, 42, 26, 890, DateTimeKind.Local).AddTicks(2549),
                            Title = "test10",
                            UserId = "10",
                            VideoUrl = "https://www.youtube.com/watch?v=60ItHLz5WEA",
                            Views = 0,
                            isPrivate = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("business_logic.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("business_logic.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("business_logic.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("business_logic.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("business_logic.Entities.Comment", b =>
                {
                    b.HasOne("business_logic.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("business_logic.Entities.Video", "Video")
                        .WithMany("Comments")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("business_logic.Entities.Like", b =>
                {
                    b.HasOne("business_logic.Entities.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("business_logic.Entities.Video", "Video")
                        .WithMany("Likes")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("business_logic.Entities.RefreshToken", b =>
                {
                    b.HasOne("business_logic.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("business_logic.Entities.Save", b =>
                {
                    b.HasOne("business_logic.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("business_logic.Entities.Video", "Video")
                        .WithMany("Saves")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("business_logic.Entities.Video", b =>
                {
                    b.HasOne("business_logic.Entities.User", "User")
                        .WithMany("Videos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("business_logic.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("business_logic.Entities.Video", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Saves");
                });
#pragma warning restore 612, 618
        }
    }
}
