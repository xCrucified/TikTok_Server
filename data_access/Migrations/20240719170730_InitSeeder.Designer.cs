// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using data_access.data;

#nullable disable

namespace data_access.Migrations
{
    [DbContext(typeof(TikTokDbContext))]
    [Migration("20240719170730_InitSeeder")]
    partial class InitSeeder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("business_logic.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId");

                    b.ToTable("Comment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Video Super!!!",
                            UserId = "1",
                            VideoId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Nice video!",
                            UserId = "2",
                            VideoId = 2
                        },
                        new
                        {
                            Id = 3,
                            Content = "Very informative.",
                            UserId = "3",
                            VideoId = 3
                        },
                        new
                        {
                            Id = 4,
                            Content = "Amazing content!",
                            UserId = "4",
                            VideoId = 4
                        },
                        new
                        {
                            Id = 5,
                            Content = "Loved it!",
                            UserId = "5",
                            VideoId = 5
                        },
                        new
                        {
                            Id = 6,
                            Content = "Great work!",
                            UserId = "6",
                            VideoId = 6
                        },
                        new
                        {
                            Id = 7,
                            Content = "Fantastic!",
                            UserId = "7",
                            VideoId = 7
                        },
                        new
                        {
                            Id = 8,
                            Content = "Very helpful.",
                            UserId = "8",
                            VideoId = 8
                        },
                        new
                        {
                            Id = 9,
                            Content = "Enjoyed watching.",
                            UserId = "9",
                            VideoId = 9
                        },
                        new
                        {
                            Id = 10,
                            Content = "Well done!",
                            UserId = "10",
                            VideoId = 10
                        });
                });

            modelBuilder.Entity("business_logic.Entities.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTimeLike")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId");

                    b.ToTable("Likes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTimeLike = new DateTime(2024, 7, 19, 20, 7, 29, 987, DateTimeKind.Local).AddTicks(4386),
                            UserId = "1",
                            VideoId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateTimeLike = new DateTime(2024, 7, 19, 20, 7, 29, 987, DateTimeKind.Local).AddTicks(4389),
                            UserId = "2",
                            VideoId = 2
                        },
                        new
                        {
                            Id = 3,
                            DateTimeLike = new DateTime(2024, 7, 19, 20, 7, 29, 987, DateTimeKind.Local).AddTicks(4391),
                            UserId = "3",
                            VideoId = 3
                        },
                        new
                        {
                            Id = 4,
                            DateTimeLike = new DateTime(2024, 7, 19, 20, 7, 29, 987, DateTimeKind.Local).AddTicks(4393),
                            UserId = "4",
                            VideoId = 4
                        },
                        new
                        {
                            Id = 5,
                            DateTimeLike = new DateTime(2024, 7, 19, 20, 7, 29, 987, DateTimeKind.Local).AddTicks(4395),
                            UserId = "5",
                            VideoId = 5
                        },
                        new
                        {
                            Id = 6,
                            DateTimeLike = new DateTime(2024, 7, 19, 20, 7, 29, 987, DateTimeKind.Local).AddTicks(4398),
                            UserId = "6",
                            VideoId = 6
                        },
                        new
                        {
                            Id = 7,
                            DateTimeLike = new DateTime(2024, 7, 19, 20, 7, 29, 987, DateTimeKind.Local).AddTicks(4400),
                            UserId = "7",
                            VideoId = 7
                        },
                        new
                        {
                            Id = 8,
                            DateTimeLike = new DateTime(2024, 7, 19, 20, 7, 29, 987, DateTimeKind.Local).AddTicks(4402),
                            UserId = "8",
                            VideoId = 8
                        },
                        new
                        {
                            Id = 9,
                            DateTimeLike = new DateTime(2024, 7, 19, 20, 7, 29, 987, DateTimeKind.Local).AddTicks(4404),
                            UserId = "9",
                            VideoId = 9
                        },
                        new
                        {
                            Id = 10,
                            DateTimeLike = new DateTime(2024, 7, 19, 20, 7, 29, 987, DateTimeKind.Local).AddTicks(4406),
                            UserId = "10",
                            VideoId = 10
                        });
                });

            modelBuilder.Entity("business_logic.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("business_logic.Entities.Save", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateSave")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId");

                    b.ToTable("Saves", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateSave = new DateTime(2024, 7, 19, 20, 7, 29, 987, DateTimeKind.Local).AddTicks(4345),
                            UserId = "1",
                            VideoId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateSave = new DateTime(2024, 7, 19, 20, 7, 29, 987, DateTimeKind.Local).AddTicks(4348),
                            UserId = "2",
                            VideoId = 2
                        },
                        new
                        {
                            Id = 3,
                            DateSave = new DateTime(2024, 7, 19, 20, 7, 29, 987, DateTimeKind.Local).AddTicks(4351),
                            UserId = "3",
                            VideoId = 3
                        },
                        new
                        {
                            Id = 4,
                            DateSave = new DateTime(2024, 7, 19, 20, 7, 29, 987, DateTimeKind.Local).AddTicks(4353),
                            UserId = "4",
                            VideoId = 4
                        },
                        new
                        {
                            Id = 5,
                            DateSave = new DateTime(2024, 7, 19, 20, 7, 29, 987, DateTimeKind.Local).AddTicks(4355),
                            UserId = "5",
                            VideoId = 5
                        },
                        new
                        {
                            Id = 6,
                            DateSave = new DateTime(2024, 7, 19, 20, 7, 29, 987, DateTimeKind.Local).AddTicks(4357),
                            UserId = "6",
                            VideoId = 6
                        },
                        new
                        {
                            Id = 7,
                            DateSave = new DateTime(2024, 7, 19, 20, 7, 29, 987, DateTimeKind.Local).AddTicks(4360),
                            UserId = "7",
                            VideoId = 7
                        },
                        new
                        {
                            Id = 8,
                            DateSave = new DateTime(2024, 7, 19, 20, 7, 29, 987, DateTimeKind.Local).AddTicks(4362),
                            UserId = "8",
                            VideoId = 8
                        },
                        new
                        {
                            Id = 9,
                            DateSave = new DateTime(2024, 7, 19, 20, 7, 29, 987, DateTimeKind.Local).AddTicks(4364),
                            UserId = "9",
                            VideoId = 9
                        },
                        new
                        {
                            Id = 10,
                            DateSave = new DateTime(2024, 7, 19, 20, 7, 29, 987, DateTimeKind.Local).AddTicks(4366),
                            UserId = "10",
                            VideoId = 10
                        });
                });

            modelBuilder.Entity("business_logic.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("Followers")
                        .HasColumnType("int");

                    b.Property<int?>("Followings")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "eca9d97d-e09c-457e-bdf8-45f486560607",
                            AccessFailedCount = 0,
                            Balance = 99999m,
                            ConcurrencyStamp = "0c843c90-a539-48b8-9e8c-87fdf0494c8b",
                            Description = "admin",
                            EmailConfirmed = false,
                            Followers = -1,
                            Followings = 0,
                            LockoutEnabled = false,
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4598d62f-4b19-41fd-a9af-b30b2de2c428",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "5471030f-cc9a-47c7-ba90-62d647f4cdc6",
                            AccessFailedCount = 0,
                            Balance = 1000m,
                            ConcurrencyStamp = "dbc46cba-0203-4740-baef-39df71253324",
                            Description = "user1",
                            EmailConfirmed = false,
                            Followers = 10,
                            Followings = 5,
                            LockoutEnabled = false,
                            PhoneNumber = "234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "17075708-4136-404a-915a-1caa81137434",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "792dc171-726b-4d10-a7ac-61a2cbe88027",
                            AccessFailedCount = 0,
                            Balance = 2000m,
                            ConcurrencyStamp = "f755485b-69d4-4a05-913d-3cc225a1e8ea",
                            Description = "user2",
                            EmailConfirmed = false,
                            Followers = 20,
                            Followings = 10,
                            LockoutEnabled = false,
                            PhoneNumber = "345678901",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51838524-29d8-487b-bb69-1ad34a273361",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = "58f1eb52-e65c-4ea5-be62-c2c1c4eeb8cf",
                            AccessFailedCount = 0,
                            Balance = 3000m,
                            ConcurrencyStamp = "0fd38151-d602-49be-a292-0dd0dff5f3f6",
                            Description = "user3",
                            EmailConfirmed = false,
                            Followers = 30,
                            Followings = 15,
                            LockoutEnabled = false,
                            PhoneNumber = "456789012",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1dd78c11-39f2-43ef-844c-3dba730a5847",
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        },
                        new
                        {
                            Id = "5e6e040a-a296-4d6e-9533-3acdcc052171",
                            AccessFailedCount = 0,
                            Balance = 4000m,
                            ConcurrencyStamp = "e95f9402-abf6-4fe3-af7e-3188742d72ee",
                            Description = "user4",
                            EmailConfirmed = false,
                            Followers = 40,
                            Followings = 20,
                            LockoutEnabled = false,
                            PhoneNumber = "567890123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "979b1151-c795-4763-844e-248e788a956f",
                            TwoFactorEnabled = false,
                            UserName = "user4"
                        },
                        new
                        {
                            Id = "d668690e-ffbf-4bad-8895-668f95dc5cc1",
                            AccessFailedCount = 0,
                            Balance = 5000m,
                            ConcurrencyStamp = "9df6ec3e-185c-4af3-a7b2-6287e74031f3",
                            Description = "user5",
                            EmailConfirmed = false,
                            Followers = 50,
                            Followings = 25,
                            LockoutEnabled = false,
                            PhoneNumber = "678901234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "47f7b10a-6dc5-43ee-8a0a-a6f1ad06c470",
                            TwoFactorEnabled = false,
                            UserName = "user5"
                        },
                        new
                        {
                            Id = "82c49ce0-0bc6-4501-a675-91c8d6ac801d",
                            AccessFailedCount = 0,
                            Balance = 6000m,
                            ConcurrencyStamp = "4f8e9985-c5d9-48d5-adef-a95609e5ca00",
                            Description = "user6",
                            EmailConfirmed = false,
                            Followers = 60,
                            Followings = 30,
                            LockoutEnabled = false,
                            PhoneNumber = "789012345",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "07ad6d4e-61fa-4254-a729-5fdfd03af8f0",
                            TwoFactorEnabled = false,
                            UserName = "user6"
                        },
                        new
                        {
                            Id = "dd02ed32-0eec-499d-95e7-1a9b4e0f8dff",
                            AccessFailedCount = 0,
                            Balance = 7000m,
                            ConcurrencyStamp = "92195542-4e9c-4a37-bae2-962b22c3fd8d",
                            Description = "user7",
                            EmailConfirmed = false,
                            Followers = 70,
                            Followings = 35,
                            LockoutEnabled = false,
                            PhoneNumber = "890123456",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6dfcc411-bb78-4cbf-bfec-171a4fbc547d",
                            TwoFactorEnabled = false,
                            UserName = "user7"
                        },
                        new
                        {
                            Id = "d6366cae-d385-404d-bc6b-21af12662404",
                            AccessFailedCount = 0,
                            Balance = 8000m,
                            ConcurrencyStamp = "83f3ef0f-1b77-4ef8-be94-cb71c2dcc14a",
                            Description = "user8",
                            EmailConfirmed = false,
                            Followers = 80,
                            Followings = 40,
                            LockoutEnabled = false,
                            PhoneNumber = "901234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "484e87d6-8587-4da0-9e9c-13095636442f",
                            TwoFactorEnabled = false,
                            UserName = "user8"
                        },
                        new
                        {
                            Id = "3237ac8e-f595-4624-a32f-4ba5fede3495",
                            AccessFailedCount = 0,
                            Balance = 9000m,
                            ConcurrencyStamp = "13335acd-829a-489b-9712-35e13c0f7df0",
                            Description = "user9",
                            EmailConfirmed = false,
                            Followers = 90,
                            Followings = 45,
                            LockoutEnabled = false,
                            PhoneNumber = "012345678",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "15380209-a3df-4326-8793-147a1fd01c9c",
                            TwoFactorEnabled = false,
                            UserName = "user9"
                        });
                });

            modelBuilder.Entity("business_logic.Entities.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.Property<bool>("isPrivate")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Videos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PublishDate = new DateTime(2024, 7, 19, 20, 7, 29, 987, DateTimeKind.Local).AddTicks(4222),
                            Title = "test1",
                            UserId = "1",
                            VideoUrl = "https://www.youtube.com/watch?v=bFhY0LH9XxY",
                            Views = 0,
                            isPrivate = true
                        },
                        new
                        {
                            Id = 2,
                            PublishDate = new DateTime(2024, 7, 19, 20, 7, 29, 987, DateTimeKind.Local).AddTicks(4272),
                            Title = "test2",
                            UserId = "2",
                            VideoUrl = "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
                            Views = 0,
                            isPrivate = false
                        },
                        new
                        {
                            Id = 3,
                            PublishDate = new DateTime(2024, 7, 19, 20, 7, 29, 987, DateTimeKind.Local).AddTicks(4275),
                            Title = "test3",
                            UserId = "3",
                            VideoUrl = "https://www.youtube.com/watch?v=3JZ_D3ELwOQ",
                            Views = 0,
                            isPrivate = true
                        },
                        new
                        {
                            Id = 4,
                            PublishDate = new DateTime(2024, 7, 19, 20, 7, 29, 987, DateTimeKind.Local).AddTicks(4278),
                            Title = "test4",
                            UserId = "4",
                            VideoUrl = "https://www.youtube.com/watch?v=oHg5SJYRHA0",
                            Views = 0,
                            isPrivate = false
                        },
                        new
                        {
                            Id = 5,
                            PublishDate = new DateTime(2024, 7, 19, 20, 7, 29, 987, DateTimeKind.Local).AddTicks(4280),
                            Title = "test5",
                            UserId = "5",
                            VideoUrl = "https://www.youtube.com/watch?v=ZZ5LpwO-An4",
                            Views = 0,
                            isPrivate = true
                        },
                        new
                        {
                            Id = 6,
                            PublishDate = new DateTime(2024, 7, 19, 20, 7, 29, 987, DateTimeKind.Local).AddTicks(4283),
                            Title = "test6",
                            UserId = "6",
                            VideoUrl = "https://www.youtube.com/watch?v=6_b7RDuLwcI",
                            Views = 0,
                            isPrivate = false
                        },
                        new
                        {
                            Id = 7,
                            PublishDate = new DateTime(2024, 7, 19, 20, 7, 29, 987, DateTimeKind.Local).AddTicks(4286),
                            Title = "test7",
                            UserId = "7",
                            VideoUrl = "https://www.youtube.com/watch?v=tVj0ZTS4WF4",
                            Views = 0,
                            isPrivate = true
                        },
                        new
                        {
                            Id = 8,
                            PublishDate = new DateTime(2024, 7, 19, 20, 7, 29, 987, DateTimeKind.Local).AddTicks(4288),
                            Title = "test8",
                            UserId = "8",
                            VideoUrl = "https://www.youtube.com/watch?v=FTQbiNvZqaY",
                            Views = 0,
                            isPrivate = false
                        },
                        new
                        {
                            Id = 9,
                            PublishDate = new DateTime(2024, 7, 19, 20, 7, 29, 987, DateTimeKind.Local).AddTicks(4291),
                            Title = "test9",
                            UserId = "9",
                            VideoUrl = "https://www.youtube.com/watch?v=lXMskKTw3Bc",
                            Views = 0,
                            isPrivate = true
                        },
                        new
                        {
                            Id = 10,
                            PublishDate = new DateTime(2024, 7, 19, 20, 7, 29, 987, DateTimeKind.Local).AddTicks(4293),
                            Title = "test10",
                            UserId = "0",
                            VideoUrl = "https://www.youtube.com/watch?v=60ItHLz5WEA",
                            Views = 0,
                            isPrivate = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("business_logic.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("business_logic.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("business_logic.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("business_logic.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("business_logic.Entities.Comment", b =>
                {
                    b.HasOne("business_logic.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("business_logic.Entities.Video", "Video")
                        .WithMany("Comments")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("business_logic.Entities.Like", b =>
                {
                    b.HasOne("business_logic.Entities.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("business_logic.Entities.Video", "Video")
                        .WithMany("Likes")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("business_logic.Entities.RefreshToken", b =>
                {
                    b.HasOne("business_logic.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("business_logic.Entities.Save", b =>
                {
                    b.HasOne("business_logic.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("business_logic.Entities.Video", "Video")
                        .WithMany("Saves")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("business_logic.Entities.Video", b =>
                {
                    b.HasOne("business_logic.Entities.User", "User")
                        .WithMany("Videos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("business_logic.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("business_logic.Entities.Video", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Saves");
                });
#pragma warning restore 612, 618
        }
    }
}
