// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using data_access.data;

#nullable disable

namespace data_access.Migrations
{
    [DbContext(typeof(TikTokDbContext))]
    partial class TikTokDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("business_logic.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId");

                    b.ToTable("Comment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Video Super!!!",
                            UserId = "1",
                            VideoId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Nice video!",
                            UserId = "2",
                            VideoId = 2
                        },
                        new
                        {
                            Id = 3,
                            Content = "Very informative.",
                            UserId = "3",
                            VideoId = 3
                        },
                        new
                        {
                            Id = 4,
                            Content = "Amazing content!",
                            UserId = "4",
                            VideoId = 4
                        },
                        new
                        {
                            Id = 5,
                            Content = "Loved it!",
                            UserId = "5",
                            VideoId = 5
                        },
                        new
                        {
                            Id = 6,
                            Content = "Great work!",
                            UserId = "6",
                            VideoId = 6
                        },
                        new
                        {
                            Id = 7,
                            Content = "Fantastic!",
                            UserId = "7",
                            VideoId = 7
                        },
                        new
                        {
                            Id = 8,
                            Content = "Very helpful.",
                            UserId = "8",
                            VideoId = 8
                        },
                        new
                        {
                            Id = 9,
                            Content = "Enjoyed watching.",
                            UserId = "9",
                            VideoId = 9
                        },
                        new
                        {
                            Id = 10,
                            Content = "Well done!",
                            UserId = "10",
                            VideoId = 10
                        });
                });

            modelBuilder.Entity("business_logic.Entities.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTimeLike")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId");

                    b.ToTable("Likes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTimeLike = new DateTime(2024, 7, 19, 20, 23, 37, 879, DateTimeKind.Local).AddTicks(5573),
                            UserId = "1",
                            VideoId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateTimeLike = new DateTime(2024, 7, 19, 20, 23, 37, 879, DateTimeKind.Local).AddTicks(5576),
                            UserId = "2",
                            VideoId = 2
                        },
                        new
                        {
                            Id = 3,
                            DateTimeLike = new DateTime(2024, 7, 19, 20, 23, 37, 879, DateTimeKind.Local).AddTicks(5578),
                            UserId = "3",
                            VideoId = 3
                        },
                        new
                        {
                            Id = 4,
                            DateTimeLike = new DateTime(2024, 7, 19, 20, 23, 37, 879, DateTimeKind.Local).AddTicks(5581),
                            UserId = "4",
                            VideoId = 4
                        },
                        new
                        {
                            Id = 5,
                            DateTimeLike = new DateTime(2024, 7, 19, 20, 23, 37, 879, DateTimeKind.Local).AddTicks(5583),
                            UserId = "5",
                            VideoId = 5
                        },
                        new
                        {
                            Id = 6,
                            DateTimeLike = new DateTime(2024, 7, 19, 20, 23, 37, 879, DateTimeKind.Local).AddTicks(5585),
                            UserId = "6",
                            VideoId = 6
                        },
                        new
                        {
                            Id = 7,
                            DateTimeLike = new DateTime(2024, 7, 19, 20, 23, 37, 879, DateTimeKind.Local).AddTicks(5587),
                            UserId = "7",
                            VideoId = 7
                        },
                        new
                        {
                            Id = 8,
                            DateTimeLike = new DateTime(2024, 7, 19, 20, 23, 37, 879, DateTimeKind.Local).AddTicks(5589),
                            UserId = "8",
                            VideoId = 8
                        },
                        new
                        {
                            Id = 9,
                            DateTimeLike = new DateTime(2024, 7, 19, 20, 23, 37, 879, DateTimeKind.Local).AddTicks(5591),
                            UserId = "9",
                            VideoId = 9
                        },
                        new
                        {
                            Id = 10,
                            DateTimeLike = new DateTime(2024, 7, 19, 20, 23, 37, 879, DateTimeKind.Local).AddTicks(5593),
                            UserId = "10",
                            VideoId = 10
                        });
                });

            modelBuilder.Entity("business_logic.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("business_logic.Entities.Save", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateSave")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId");

                    b.ToTable("Saves", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateSave = new DateTime(2024, 7, 19, 20, 23, 37, 879, DateTimeKind.Local).AddTicks(5534),
                            UserId = "1",
                            VideoId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateSave = new DateTime(2024, 7, 19, 20, 23, 37, 879, DateTimeKind.Local).AddTicks(5538),
                            UserId = "2",
                            VideoId = 2
                        },
                        new
                        {
                            Id = 3,
                            DateSave = new DateTime(2024, 7, 19, 20, 23, 37, 879, DateTimeKind.Local).AddTicks(5540),
                            UserId = "3",
                            VideoId = 3
                        },
                        new
                        {
                            Id = 4,
                            DateSave = new DateTime(2024, 7, 19, 20, 23, 37, 879, DateTimeKind.Local).AddTicks(5543),
                            UserId = "4",
                            VideoId = 4
                        },
                        new
                        {
                            Id = 5,
                            DateSave = new DateTime(2024, 7, 19, 20, 23, 37, 879, DateTimeKind.Local).AddTicks(5545),
                            UserId = "5",
                            VideoId = 5
                        },
                        new
                        {
                            Id = 6,
                            DateSave = new DateTime(2024, 7, 19, 20, 23, 37, 879, DateTimeKind.Local).AddTicks(5547),
                            UserId = "6",
                            VideoId = 6
                        },
                        new
                        {
                            Id = 7,
                            DateSave = new DateTime(2024, 7, 19, 20, 23, 37, 879, DateTimeKind.Local).AddTicks(5549),
                            UserId = "7",
                            VideoId = 7
                        },
                        new
                        {
                            Id = 8,
                            DateSave = new DateTime(2024, 7, 19, 20, 23, 37, 879, DateTimeKind.Local).AddTicks(5551),
                            UserId = "8",
                            VideoId = 8
                        },
                        new
                        {
                            Id = 9,
                            DateSave = new DateTime(2024, 7, 19, 20, 23, 37, 879, DateTimeKind.Local).AddTicks(5553),
                            UserId = "9",
                            VideoId = 9
                        },
                        new
                        {
                            Id = 10,
                            DateSave = new DateTime(2024, 7, 19, 20, 23, 37, 879, DateTimeKind.Local).AddTicks(5555),
                            UserId = "10",
                            VideoId = 10
                        });
                });

            modelBuilder.Entity("business_logic.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("Followers")
                        .HasColumnType("int");

                    b.Property<int?>("Followings")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Balance = 99999m,
                            ConcurrencyStamp = "280cd20f-b78d-49ee-8563-705d24305513",
                            Description = "admin",
                            EmailConfirmed = false,
                            Followers = -1,
                            Followings = 0,
                            LockoutEnabled = false,
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3bb24b01-4c17-4b88-b78f-d7b39961a5a2",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Balance = 1000m,
                            ConcurrencyStamp = "c8bffbd6-50dd-4a2e-b824-02dc908a13f6",
                            Description = "user1",
                            EmailConfirmed = false,
                            Followers = 10,
                            Followings = 5,
                            LockoutEnabled = false,
                            PhoneNumber = "234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cb46ea68-138d-4b21-8a48-481348ad10e8",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            Balance = 2000m,
                            ConcurrencyStamp = "2cf1423c-274b-4f01-ae85-d4716e06bb30",
                            Description = "user2",
                            EmailConfirmed = false,
                            Followers = 20,
                            Followings = 10,
                            LockoutEnabled = false,
                            PhoneNumber = "345678901",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "64895769-b43a-4248-b52c-3230afb70695",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            Balance = 3000m,
                            ConcurrencyStamp = "9fb7c77b-269f-469b-80d6-d833c0f50d27",
                            Description = "user3",
                            EmailConfirmed = false,
                            Followers = 30,
                            Followings = 15,
                            LockoutEnabled = false,
                            PhoneNumber = "456789012",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0e16d653-37df-42c1-be70-67732cd383bc",
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            Balance = 4000m,
                            ConcurrencyStamp = "a27f0bd0-8592-4e0f-b02e-bf49d5e765ef",
                            Description = "user4",
                            EmailConfirmed = false,
                            Followers = 40,
                            Followings = 20,
                            LockoutEnabled = false,
                            PhoneNumber = "567890123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5135f650-c63e-4d5f-9b2a-b9a3e64366f8",
                            TwoFactorEnabled = false,
                            UserName = "user4"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            Balance = 5000m,
                            ConcurrencyStamp = "779de28f-bb9a-457d-8ecb-229b35dbcfa7",
                            Description = "user5",
                            EmailConfirmed = false,
                            Followers = 50,
                            Followings = 25,
                            LockoutEnabled = false,
                            PhoneNumber = "678901234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "be19e49d-bd5d-4d51-bab1-c60cf9113ebc",
                            TwoFactorEnabled = false,
                            UserName = "user5"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            Balance = 6000m,
                            ConcurrencyStamp = "170e51ea-5aa0-493c-b6ca-5902734ee50b",
                            Description = "user6",
                            EmailConfirmed = false,
                            Followers = 60,
                            Followings = 30,
                            LockoutEnabled = false,
                            PhoneNumber = "789012345",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ebe265d6-43c8-4d67-a9e4-8a8011464fe0",
                            TwoFactorEnabled = false,
                            UserName = "user6"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            Balance = 7000m,
                            ConcurrencyStamp = "59dac5c0-e8d5-4f3f-9a46-5ae680f8aa1e",
                            Description = "user7",
                            EmailConfirmed = false,
                            Followers = 70,
                            Followings = 35,
                            LockoutEnabled = false,
                            PhoneNumber = "890123456",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dff77a63-37e2-49f8-9966-5fb002d6dac6",
                            TwoFactorEnabled = false,
                            UserName = "user7"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            Balance = 8000m,
                            ConcurrencyStamp = "00255325-4342-439e-a1d3-e6699cf0bad6",
                            Description = "user8",
                            EmailConfirmed = false,
                            Followers = 80,
                            Followings = 40,
                            LockoutEnabled = false,
                            PhoneNumber = "901234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36f7b0a3-f28f-4909-b35d-6a82cac0726d",
                            TwoFactorEnabled = false,
                            UserName = "user8"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            Balance = 9000m,
                            ConcurrencyStamp = "5cb702c3-e2d1-486d-ba7e-306d70388dd6",
                            Description = "user9",
                            EmailConfirmed = false,
                            Followers = 90,
                            Followings = 45,
                            LockoutEnabled = false,
                            PhoneNumber = "012345678",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1634814e-a767-48da-9dd4-8e9fe2b90d6b",
                            TwoFactorEnabled = false,
                            UserName = "user9"
                        });
                });

            modelBuilder.Entity("business_logic.Entities.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.Property<bool>("isPrivate")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Videos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PublishDate = new DateTime(2024, 7, 19, 20, 23, 37, 879, DateTimeKind.Local).AddTicks(5368),
                            Title = "test1",
                            UserId = "1",
                            VideoUrl = "https://www.youtube.com/watch?v=bFhY0LH9XxY",
                            Views = 0,
                            isPrivate = true
                        },
                        new
                        {
                            Id = 2,
                            PublishDate = new DateTime(2024, 7, 19, 20, 23, 37, 879, DateTimeKind.Local).AddTicks(5412),
                            Title = "test2",
                            UserId = "2",
                            VideoUrl = "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
                            Views = 0,
                            isPrivate = false
                        },
                        new
                        {
                            Id = 3,
                            PublishDate = new DateTime(2024, 7, 19, 20, 23, 37, 879, DateTimeKind.Local).AddTicks(5457),
                            Title = "test3",
                            UserId = "3",
                            VideoUrl = "https://www.youtube.com/watch?v=3JZ_D3ELwOQ",
                            Views = 0,
                            isPrivate = true
                        },
                        new
                        {
                            Id = 4,
                            PublishDate = new DateTime(2024, 7, 19, 20, 23, 37, 879, DateTimeKind.Local).AddTicks(5461),
                            Title = "test4",
                            UserId = "4",
                            VideoUrl = "https://www.youtube.com/watch?v=oHg5SJYRHA0",
                            Views = 0,
                            isPrivate = false
                        },
                        new
                        {
                            Id = 5,
                            PublishDate = new DateTime(2024, 7, 19, 20, 23, 37, 879, DateTimeKind.Local).AddTicks(5463),
                            Title = "test5",
                            UserId = "5",
                            VideoUrl = "https://www.youtube.com/watch?v=ZZ5LpwO-An4",
                            Views = 0,
                            isPrivate = true
                        },
                        new
                        {
                            Id = 6,
                            PublishDate = new DateTime(2024, 7, 19, 20, 23, 37, 879, DateTimeKind.Local).AddTicks(5466),
                            Title = "test6",
                            UserId = "6",
                            VideoUrl = "https://www.youtube.com/watch?v=6_b7RDuLwcI",
                            Views = 0,
                            isPrivate = false
                        },
                        new
                        {
                            Id = 7,
                            PublishDate = new DateTime(2024, 7, 19, 20, 23, 37, 879, DateTimeKind.Local).AddTicks(5469),
                            Title = "test7",
                            UserId = "7",
                            VideoUrl = "https://www.youtube.com/watch?v=tVj0ZTS4WF4",
                            Views = 0,
                            isPrivate = true
                        },
                        new
                        {
                            Id = 8,
                            PublishDate = new DateTime(2024, 7, 19, 20, 23, 37, 879, DateTimeKind.Local).AddTicks(5471),
                            Title = "test8",
                            UserId = "8",
                            VideoUrl = "https://www.youtube.com/watch?v=FTQbiNvZqaY",
                            Views = 0,
                            isPrivate = false
                        },
                        new
                        {
                            Id = 9,
                            PublishDate = new DateTime(2024, 7, 19, 20, 23, 37, 879, DateTimeKind.Local).AddTicks(5474),
                            Title = "test9",
                            UserId = "9",
                            VideoUrl = "https://www.youtube.com/watch?v=lXMskKTw3Bc",
                            Views = 0,
                            isPrivate = true
                        },
                        new
                        {
                            Id = 10,
                            PublishDate = new DateTime(2024, 7, 19, 20, 23, 37, 879, DateTimeKind.Local).AddTicks(5476),
                            Title = "test10",
                            UserId = "10",
                            VideoUrl = "https://www.youtube.com/watch?v=60ItHLz5WEA",
                            Views = 0,
                            isPrivate = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("business_logic.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("business_logic.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("business_logic.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("business_logic.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("business_logic.Entities.Comment", b =>
                {
                    b.HasOne("business_logic.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("business_logic.Entities.Video", "Video")
                        .WithMany("Comments")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("business_logic.Entities.Like", b =>
                {
                    b.HasOne("business_logic.Entities.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("business_logic.Entities.Video", "Video")
                        .WithMany("Likes")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("business_logic.Entities.RefreshToken", b =>
                {
                    b.HasOne("business_logic.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("business_logic.Entities.Save", b =>
                {
                    b.HasOne("business_logic.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("business_logic.Entities.Video", "Video")
                        .WithMany("Saves")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("business_logic.Entities.Video", b =>
                {
                    b.HasOne("business_logic.Entities.User", "User")
                        .WithMany("Videos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("business_logic.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("business_logic.Entities.Video", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Saves");
                });
#pragma warning restore 612, 618
        }
    }
}
